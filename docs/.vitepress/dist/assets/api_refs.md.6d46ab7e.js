import{r as n,o as s,c as a,b as t,w as o,a as e}from"./app.4839b763.js";const p='{"title":"Observable X Reactive","description":"","frontmatter":{},"headers":[{"level":2,"title":"fromRef","slug":"fromref"},{"level":2,"title":"syncRef","slug":"syncref"},{"level":3,"title":"Simple example","slug":"simple-example"},{"level":3,"title":"Options - .with","slug":"options-with"},{"level":3,"title":"Change ref bindings","slug":"change-ref-bindings"},{"level":2,"title":"refFrom","slug":"reffrom"},{"level":2,"title":"refsFrom","slug":"refsfrom"}],"relativePath":"api/refs.md","lastUpdated":1615796734971}',c={},l=e('<h1 id="observable-x-reactive"><a class="header-anchor" href="#observable-x-reactive" aria-hidden="true">#</a> Observable X Reactive</h1><p>These are utilities that allow interoperability between rxjs&#39; observables and vue&#39;s reactivity.</p><p><div class="table-of-contents"><ul><li><a href="#fromref">fromRef</a></li><li><a href="#syncref">syncRef</a><ul><li><a href="#simple-example">Simple example</a></li><li><a href="#options-with">Options - .with</a></li><li><a href="#change-ref-bindings">Change ref bindings</a></li></ul></li><li><a href="#reffrom">refFrom</a></li><li><a href="#refsfrom">refsFrom</a></li></ul></div></p><h2 id="fromref"><a class="header-anchor" href="#fromref" aria-hidden="true">#</a> <code>fromRef</code></h2><div class="language-ts"><pre><code><span class="token comment">// for vue refs</span>\n<span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ref<span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// for reactive states</span>\n<span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>reactiveState<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates an observable from a vue ref.<br> Each time a ref&#39;s value is changed - observable emits.<br> Can also accept vue reactive objects and value factories.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">fromRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count is&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 42</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 1</span>\n</code></pre></div><hr><h2 id="syncref"><a class="header-anchor" href="#syncref" aria-hidden="true">#</a> <code>syncRef</code></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R1</span><span class="token punctuation">,</span> <span class="token constant">R2</span> <span class="token operator">=</span> <span class="token constant">R1</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  ref1<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  map<span class="token operator">:</span> <span class="token punctuation">{</span>\n    to<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">R1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R2</span><span class="token punctuation">,</span>\n    <span class="token keyword">from</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">R2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ref2<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R2</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token constant">R2</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> SyncedRef<span class="token operator">&lt;</span><span class="token constant">R2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates a binding between two refs.<br> The binding can be:</p><ul><li>One-way if only the one mapper is defined.</li><li>Two-way if both mappers (<code>to</code> and <code>from</code>) are defined.</li></ul><p>The second ref serves as an origin point for the binding,<br> values <strong>from</strong> the second ref and <strong>to</strong> the second ref are mapped onto the first.</p><h3 id="simple-example"><a class="header-anchor" href="#simple-example" aria-hidden="true">#</a> Simple example</h3><div class="language-ts"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// two-way binding</span>\n<span class="token comment">// Once `count` changes - `countStr` changes too</span>\n<span class="token comment">// and vice versa,</span>\n<span class="token comment">// according to the rules in the map.</span>\n<span class="token keyword">const</span> countStr <span class="token operator">=</span> <span class="token function">syncRef</span><span class="token punctuation">(</span>\n  count<span class="token punctuation">,</span> <span class="token comment">// ref to bind</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// how to convert value when mapping to the resulting ref</span>\n    to<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token comment">// how to convert value when mapping from the resulting ref</span>\n    <span class="token keyword">from</span><span class="token operator">:</span> Number\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// one-way binding</span>\n<span class="token comment">// Once `countInputStr` changes - `count` changes too,</span>\n<span class="token comment">// according to the rules in the map.</span>\n<span class="token comment">// But if `count` changes - `countInputStr` stays the same</span>\n<span class="token keyword">const</span> countInputStr <span class="token operator">=</span> <span class="token function">syncRef</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> Number <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Every variable is exposed to <code>window</code>,<br> so feel free to open the console and play with them!</p>',16),r=e('<h3 id="options-with"><a class="header-anchor" href="#options-with" aria-hidden="true">#</a> Options - <code>.with</code></h3><p>It&#39;s also possible to set the <code>WatchOptions</code> for <code>syncRef</code> using the <code>with</code> static method:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> customSyncRef <span class="token operator">=</span> syncRef<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Don&#39;t wait for `nextTick`</span>\n  flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// Set the value from the first ref immediately</span>\n  immediate<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use `.with` again on custom syncRef to add or rewrite watcg options</span>\n<span class="token keyword">const</span> deepSyncRef <span class="token operator">=</span> customSyncRef<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  deep<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/** The whole options for deepSyncRef are\n * {\n *   flush: &#39;sync&#39;,\n *   immediate: true,\n *   deep: true\n * }\n */</span>\n</code></pre></div><h3 id="change-ref-bindings"><a class="header-anchor" href="#change-ref-bindings" aria-hidden="true">#</a> Change ref bindings</h3><p>Value returned from <code>syncRef</code> is, however, different from your usual ref - it allows to control the bindings manually:</p><div class="language-ts"><pre><code><span class="token comment">// Controls the incoming binding to this ref</span>\ncountStr<span class="token punctuation">.</span>to\n<span class="token comment">// cuts the binding altogether</span>\ncountStr<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Applies the binding to a new ref</span>\ncountStr<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// (may need to set a new map, if the ref type is different from before)</span>\ncountStr<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> String<span class="token punctuation">,</span> <span class="token comment">/* new watch options: */</span><span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Controls the outcoming binding from this ref</span>\ncountStr<span class="token punctuation">.</span><span class="token keyword">from</span>\n<span class="token comment">// cuts the binding altogether</span>\ncountStr<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Applies the binding to a new ref</span>\ncountStr<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// (may need to set a new map, if the ref type is different from before)</span>\ncountStr<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> <span class="token comment">/* new watch options: */</span><span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>You can also play with this in the browser console using the example above.</p><hr><h2 id="reffrom"><a class="header-anchor" href="#reffrom" aria-hidden="true">#</a> <code>refFrom</code></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>obserableInput<span class="token operator">:</span> ObservableInput<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates a ref from a couple of possible inputs.<br> These include:</p><ul><li><code>Promise</code></li><li><code>Generator</code></li><li><code>Iterable</code></li><li><code>Observable</code></li><li><code>Array</code></li><li>Vue&#39;s <code>Reactive</code></li></ul><p>Will also work as a simple <code>ref</code> function as a safeguard or a convenience, in case it is given an unrecognizable value.</p><hr><h2 id="refsfrom"><a class="header-anchor" href="#refsfrom" aria-hidden="true">#</a> <code>refsFrom</code></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  input<span class="token operator">:</span> ObservableInput<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  defaultValues<span class="token operator">:</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token constant">E</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Refs<span class="token operator">&lt;</span>Subscribers<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates two refs from an observable input, same as <a href="#reffrom"><code>refFrom</code></a> (promise, iterable, observable and alike):</p><ul><li><code>next</code> - is set when the resulting observable resolves</li><li><code>error</code> - is set when the resulting observable errors</li></ul><p>Until the observable emits, the refs will contain <code>undefined</code>, if default values for the refs are not given as a second parameter.</p><p>Example:</p><div class="language-ts"><pre><code><span class="token comment">// Suppose we have some function that either returns a promise or rejects it:</span>\n<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">getPage</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Using `refsFrom` we can process both the success and error cases</span>\n<span class="token comment">// without the need for try/then/catch!</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> content<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">refsFrom</span><span class="token punctuation">(</span>\n  <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token string">&#39;raiondesu&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// Extract content first</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>obj <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Normally the results are displayed in a template,</span>\n<span class="token comment">// so `watch` here is just to get the point across:</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> value <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise is resolved!&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">watch</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> value <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise is rejected!&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',21);c.render=function(e,p,c,u,i,k){const d=n("SyncRef"),f=n("ClientOnly");return s(),a("div",null,[l,t(f,null,{default:o((()=>[t(d)])),_:1}),r])};export default c;export{p as __pageData};
