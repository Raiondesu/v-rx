import{r as n,o as s,c as a,b as t,w as p,a as o}from"./app.d0fc6c8e.js";const e='{"title":"Ref interaction","description":"","frontmatter":{},"headers":[{"level":2,"title":"fromRef","slug":"fromref"},{"level":2,"title":"syncRef","slug":"syncref"}],"relativePath":"api/refs.md","lastUpdated":1614672319409}',c={},l=o('<h1 id="ref-interaction"><a class="header-anchor" href="#ref-interaction" aria-hidden="true">#</a> Ref interaction</h1><h2 id="fromref"><a class="header-anchor" href="#fromref" aria-hidden="true">#</a> <code>fromRef</code></h2><div class="language-ts"><pre><code><span class="token comment">// for vue refs</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fromRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ref<span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// for reactive states</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fromRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>reactiveState<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates an observable from a vue ref.<br> Each time a ref&#39;s value is changed - observable emits.<br> Can also accept vue reactive objects and value factories.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">fromRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count is&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 42</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 1</span>\n</code></pre></div><h2 id="syncref"><a class="header-anchor" href="#syncref" aria-hidden="true">#</a> <code>syncRef</code></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">syncRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R1</span><span class="token punctuation">,</span> <span class="token constant">R2</span> <span class="token operator">=</span> <span class="token constant">R1</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  ref1<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  map<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">to</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">R1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R2</span><span class="token punctuation">,</span>\n    <span class="token keyword">from</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">R2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ref2<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R2</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token constant">R2</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates a binding between two refs.<br> The binding can be:</p><ul><li>One-way if only the one mapper is defined.</li><li>Two-way if both mappers (<code>to</code> and <code>from</code>) are defined.</li></ul><p>The second ref serves as an origin point for the binding,<br> values <strong>from</strong> the second ref and <strong>to</strong> the second ref are mapped onto it.</p><p>Example:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// two-way binding</span>\n<span class="token comment">// Once count changes - countStr changes too</span>\n<span class="token comment">// and vice versa,</span>\n<span class="token comment">// according to the rules in the map.</span>\n<span class="token keyword">const</span> countStr <span class="token operator">=</span> <span class="token function">syncRef</span><span class="token punctuation">(</span>\n  count<span class="token punctuation">,</span> <span class="token comment">// ref to bind</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// how to convert value when mapping to the resulting ref</span>\n    to<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token comment">// how to convert value when mapping from the resulting ref</span>\n    <span class="token keyword">from</span><span class="token operator">:</span> Number\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// one-way binding</span>\n<span class="token comment">// Once countInputStr changes - count changes too,</span>\n<span class="token comment">// according to the rules in the map.</span>\n<span class="token comment">// But if count changes - countInputStr stays the same</span>\n<span class="token keyword">const</span> countInputStr <span class="token operator">=</span> <span class="token function">syncRef</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> Number <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Every variable is exposed to <code>window</code>,<br> so feel free to open the console and play with them!</p>',13),u=o('<div class="language-ts"><pre><code>count<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;countStr:&#39;</span><span class="token punctuation">,</span> countStr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; countStr: 1</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;countInputStr:&#39;</span><span class="token punctuation">,</span> countInputStr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; countInputStr: &#39;0&#39;</span>\n\ncountStr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; count: 2</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;countInputStr:&#39;</span><span class="token punctuation">,</span> countInputStr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; countInputStr: &#39;0&#39;</span>\n\ncountInputStr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; count: 42</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;countStr:&#39;</span><span class="token punctuation">,</span> countStr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; countStr: &#39;42&#39;</span>\n</code></pre></div>',1);c.render=function(o,e,c,r,k,i){const f=n("SyncRef"),d=n("ClientOnly");return s(),a("div",null,[l,t(d,null,{default:p((()=>[t(f)])),_:1}),u])};export default c;export{e as __pageData};
