import{o as n,c as s,a}from"./app.7b2aa302.js";const t='{"title":"Ref interaction","description":"","frontmatter":{},"headers":[{"level":2,"title":"fromRef","slug":"fromref"},{"level":2,"title":"syncRef","slug":"syncref"}],"relativePath":"api/refs.md","lastUpdated":1614149128676}',p={},o=a('<h1 id="ref-interaction"><a class="header-anchor" href="#ref-interaction" aria-hidden="true">#</a> Ref interaction</h1><h2 id="fromref"><a class="header-anchor" href="#fromref" aria-hidden="true">#</a> <code>fromRef</code></h2><div class="language-ts"><pre><code><span class="token comment">// for vue refs</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fromRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ref<span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// for reactive states</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fromRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>reactiveState<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates an observable from a vue ref.<br> Each time a ref&#39;s value is changed - observable emits.<br> Can also accept vue reactive objects and value factories.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">fromRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count is&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 42</span>\n\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// logs</span>\n<span class="token comment">// &gt; count is 1</span>\n</code></pre></div><h2 id="syncref"><a class="header-anchor" href="#syncref" aria-hidden="true">#</a> <code>syncRef</code></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">syncRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  state<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n  prop<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">map</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">,</span>\n  refValue<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">syncRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  state<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n  prop<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>\n  refValue<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><p>Creates a one-side bind between a ref and a value from a reactive state.<br> When the reactive state changes, the ref is updated, but not vice versa!</p><p>Example:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  count<span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">syncRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Ref is updated when state is changes</span>\nstate<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; 1</span>\n\n<span class="token comment">// But not vice versa</span>\ncount<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state.count&#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//&gt; 1</span>\n</code></pre></div>',10);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
