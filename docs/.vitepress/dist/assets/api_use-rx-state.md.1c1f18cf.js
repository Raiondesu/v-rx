import{r as n,o as s,c as a,b as t,w as p,a as e}from"./app.2d4b7f3a.js";const o='{"title":"useRxState","description":"","frontmatter":{},"headers":[{"level":2,"title":"Description","slug":"description"},{"level":2,"title":"Type Signature and overloads","slug":"type-signature-and-overloads"},{"level":3,"title":"State","slug":"state"},{"level":3,"title":"Reducers","slug":"reducers"},{"level":2,"title":"Basic example","slug":"basic-example"}],"relativePath":"api/use-rx-state.md","lastUpdated":1614102165696}',c={},l=e('<h1 id="userxstate">useRxState</h1><blockquote><p>Allows to bind reducers to a reactive state and an observable.</p></blockquote><p><a href="https://github.com/Raiondesu/vuse-rx/blob/main/src/use-rx.ts" target="_blank" rel="noopener noreferrer">Source</a></p><p><div class="table-of-contents"><ul><li><a href="#userxstate">useRxState</a><ul><li><a href="#description">Description</a></li><li><a href="#type-signature-and-overloads">Type Signature and overloads</a></li><li><a href="#basic-example-https-github-com-raiondesu-vuse-rx-blob-main-docs-vitepress-theme-recipes-counter-vue">Basic example</a></li></ul></li></ul></div></p><h2 id="description">Description</h2><p>Implements a <a href="/guide/state.html">light flux pattern</a> using rxjs&#39; Observables.</p><p>It accepts a base state, some reducers, and transforms them into a vue reactive state, actions to update the state and some observables to handle it:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Now using const destructuring:</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  <span class="token comment">// actions that mutate the state via reducers</span>\n  actions<span class="token punctuation">,</span>\n\n  <span class="token comment">// vue reactive state</span>\n  state<span class="token punctuation">,</span>\n\n  <span class="token comment">// state observable</span>\n  state$<span class="token punctuation">,</span>\n\n  <span class="token comment">// observables that are triggered on specific actions</span>\n  actions$\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRxState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="type-signature-and-overloads">Type Signature and overloads</h2><div class="language-ts"><pre><code><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">StateReducers<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  reducers<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>\n  map$<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    state$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Readonly<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>\n    state<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    actions$<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Capitalize<span class="token operator">&lt;</span>Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Observable<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> SubscribableRxRes<span class="token operator">&lt;</span>Reduceractions<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span>\n</code></pre></div><p>This function is split into two parts:</p><ol><li>State-capturing function - determines the shape and contents of the state and returns the second part:</li><li>Reducers-capturing function - sets the reducers</li></ol><h3 id="state"><strong>State</strong></h3><div class="language-ts"><pre><code><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Function</span>\n</code></pre></div><p>There&#39;s only one aspect to this function and only one purpose - to remember the initial state and infer its type.</p><p>It then returns the second function.</p><h3 id="reducers"><strong>Reducers</strong></h3><div class="language-ts"><pre><code><span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">StateReducers<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  reducers<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>\n  map$<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    state$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Readonly<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    reducers<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>\n    state<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    actions$<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Capitalize<span class="token operator">&lt;</span>Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> Observable<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Observable<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> SubscribableRxRes<span class="token operator">&lt;</span>Reduceractions<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span>\n</code></pre></div><p>This function&#39;s primary goal is to bind reducers to the state.</p><p>The reducers are passed in as a first parameter in the following format:</p><div class="language-ts"><pre><code><span class="token punctuation">{</span>\n  <span class="token function-variable function">nameOfTheReducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>reducersParameters<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> newState <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// State can be ignored if not needed:</span>\n  <span class="token function-variable function">statelessReducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>reducersParameters<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> newState <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// It&#39;s also possible to return an observable directly from the reducer,</span>\n  <span class="token comment">// this one creates an interval, for example:</span>\n  <span class="token function-variable function">createInterval</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>reducersParameters<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>It&#39;s also possible to modify the resulting observable using the second parameter, <code>map$</code>.<br> It accepts the resulting observable (fired on each action), a map of raw reducers (basically, the first parameter itself), the state, and a map of all observables that are fired on action calls.</p><p>For usage examples with both parameters see the <code>[stopwatch</code> recipe](/recipes/stopwatch).</p><h2 id="basic-example"><a href="https://github.com/Raiondesu/vuse-rx/blob/main/docs/.vitepress/theme/recipes/counter.vue" target="_blank" rel="noopener noreferrer">Basic example</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  actions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    increment\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">,</span>\n  state$\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRxState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Subscription to the observable &quot;activates&quot; the resulting actions.</span>\nstate$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter: &#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment {{ state.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',26);c.render=function(e,o,c,r,u,i){const k=n("CounterDemo"),d=n("ClientOnly");return s(),a("div",null,[l,t(d,null,{default:p((()=>[t(k)])),_:1})])};export default c;export{o as __pageData};
