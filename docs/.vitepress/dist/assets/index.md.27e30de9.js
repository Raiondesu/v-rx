import{o as n,c as s,a,b as t}from"./app.6416951a.js";const p='{"title":"Install","description":"","frontmatter":{},"headers":[{"level":3,"title":"Install","slug":"install"},{"level":3,"title":"Use","slug":"use"}],"relativePath":"index.md","lastUpdated":1613572075074}',o={},e={align:"center",style:{"text-align":"center"}},c=t('<h3 align="center" style="text-align:center;">A first-class rx state-manager for Vue 3</h3><p align="center" style="text-align:center;"><a href="https://github.com/Raiondesu/vuse-rx/actions"><img src="https://img.shields.io/github/workflow/status/raiondesu/vuse-rx/CI?style=flat-square"></a><a href="https://npmjs.com/vuse-rx"><img src="https://img.shields.io/npm/v/vuse-rx?style=flat-square"></a><a href="https://npmjs.com/vuse-rx"><img src="https://img.shields.io/bundlephobia/minzip/vuse-rx?style=flat-square"></a><a href="https://npmjs.com/vuse-rx"><img src="https://img.shields.io/npm/dt/vuse-rx?style=flat-square"></a></p><h3 id="install"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h3><p><code>npm i -S vuse-rx</code></p><h3 id="use"><a class="header-anchor" href="#use" aria-hidden="true">#</a> Use</h3><h4 id="userxstate"><a class="header-anchor" href="#userxstate" aria-hidden="true">#</a> useRxState</h4><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> interval<span class="token punctuation">,</span> merge<span class="token punctuation">,</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> filter<span class="token punctuation">,</span> map<span class="token punctuation">,</span> mapTo<span class="token punctuation">,</span> switchMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Define base state type</span>\n<span class="token class-name"><span class="token keyword">interface</span></span> State <span class="token punctuation">{</span>\n  count<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  maxValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  step<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Define logic rules as simple functions</span>\n<span class="token keyword">const</span> <span class="token function-variable function">createState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span>State<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  count<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  speed<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  maxValue<span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>\n  step<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">validateSpeed</span> <span class="token operator">=</span> <span class="token punctuation">(</span>speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> speed <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> speed <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getNextValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span> state<span class="token punctuation">.</span>maxValue<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">paused</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> state<span class="token punctuation">.</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">paused</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>step <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> state<span class="token punctuation">.</span>maxValue<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>count<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">calcDelay</span> <span class="token operator">=</span> <span class="token punctuation">(</span>speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1000</span> <span class="token operator">/</span> speed<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">onInterval</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">mapValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Partial<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token function">paused</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">of</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token function">calcDelay</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>\n    <span class="token function">mapTo</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">map</span><span class="token punctuation">(</span>mapValue<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//</span>\n\n<span class="token comment">// Define business rules as a Vue hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRxState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuse-rx&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useStopwatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Note the double invocation here</span>\n  <span class="token keyword">return</span> <span class="token function">useRxState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">(</span>\n    <span class="token comment">// Implement basic state reducers</span>\n    <span class="token punctuation">{</span>\n      <span class="token function-variable function">setStep</span><span class="token operator">:</span> <span class="token punctuation">(</span>step<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> step <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">setValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">setSpeed</span><span class="token operator">:</span> <span class="token punctuation">(</span>speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> speed<span class="token operator">:</span> <span class="token function">validateSpeed</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// Can return observables</span>\n      <span class="token function-variable function">setCountState</span><span class="token operator">:</span> <span class="token punctuation">(</span>play<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> play <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n\n      <span class="token comment">// Can reference the &quot;older&quot; state by returning a function that accepts the state</span>\n      <span class="token function-variable function">setMaxValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> maxValue<span class="token operator">:</span> max<span class="token punctuation">,</span> value<span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> max <span class="token operator">?</span> max <span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// Implement common business logic</span>\n    <span class="token punctuation">(</span>\n      <span class="token comment">/* state observable: */</span> state$<span class="token punctuation">,</span>\n      <span class="token comment">/* reducers you just wrote above: */</span> reducers\n    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">merge</span><span class="token punctuation">(</span>\n      state$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token function">onInterval</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> reducers<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token function">getNextValue</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      state$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">paused</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use it!</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>\n  <span class="token comment">// Reducers are now actions</span>\n  actions<span class="token punctuation">,</span>\n\n  <span class="token comment">// state is reactive</span>\n  <span class="token comment">// and can be used to display data in templates</span>\n  state<span class="token punctuation">,</span>\n\n  <span class="token comment">// fires each time an action is activated</span>\n  state$\n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useStopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nstate$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>newState <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state updated:&#39;</span><span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nactions<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// logs:</span>\n<span class="token comment">// state updated: {count: false, speed: 10, value: 1, maxValue: NaN, step: 1}</span>\n\nactions<span class="token punctuation">.</span><span class="token function">setCountState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// logs:</span>\n<span class="token comment">// state updated: {count: true, speed: 10, value: 1, maxValue: NaN, step: 1}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state:&#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// logs:</span>\n<span class="token comment">// state: {count: true, speed: 10, value: 1, maxValue: NaN, step: 1}</span>\n</code></pre></div>',7);o.render=function(t,p,o,u,l,k){return n(),s("div",null,[a("h1",e,[a("img",{src:t.$withBase("/logo-g.svg"),alt:"vuse-rx"},null,8,["src"])]),c])};export default o;export{p as __pageData};
