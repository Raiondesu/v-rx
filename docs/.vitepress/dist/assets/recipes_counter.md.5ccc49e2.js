import{r as n,o as s,c as a,b as t,w as p,d as o,a as e}from"./app.70b21eef.js";const c='{"title":"Counter","description":"","frontmatter":{},"relativePath":"recipes/counter.md","lastUpdated":1615658657934}',u={},l=t("h1",{id:"counter"},[t("a",{class:"header-anchor",href:"#counter","aria-hidden":"true"},"#"),o(" Counter")],-1),i=t("p",null,"A simple example of a counter state with an increment reducer:",-1),k=e('<p>The full source can be found <a href="https://github.com/Raiondesu/vuse-rx/blob/main/docs/.vitepress/theme/recipes/counter.vue" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Every variable is exposed to <code>window</code>, so feel free to open the console and play with it!</p><div class="language-vue"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRxState<span class="token punctuation">,</span> syncRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuse-rx&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> toRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      actions<span class="token punctuation">,</span>\n      state<span class="token punctuation">,</span>\n      state$\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRxState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// stateful reducer</span>\n      <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// stateless reducer</span>\n      <span class="token function-variable function">setCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">count<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        count<span class="token operator">:</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">+</span>count\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// stateless reducer that uses other reducers</span>\n      <span class="token comment">// and returns an observable</span>\n      <span class="token function">setCountAfter</span><span class="token punctuation">(</span><span class="token parameter">count<span class="token operator">:</span> string<span class="token punctuation">,</span> timeout<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// with `this` you can access other already defined reducers</span>\n        <span class="token keyword">return</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">delay</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// stateful reducer that uses other reducers</span>\n      <span class="token comment">// and returns an observable</span>\n      <span class="token function">incrementAfter</span><span class="token punctuation">(</span><span class="token parameter">timeout<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// with `this` you can access other already defined reducers</span>\n        <span class="token keyword">return</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCountAfter</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    state$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter: &#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      actions<span class="token punctuation">,</span>\n      state<span class="token punctuation">,</span>\n\n      <span class="token comment">// One-way data binding from reactive state (with type convertation)</span>\n      <span class="token comment">// We need to have a separate &quot;user-input&quot; state for the counter that is still synced with the state</span>\n      countRef<span class="token operator">:</span> <span class="token function">syncRef</span><span class="token punctuation">(</span><span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> to<span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>actions.increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment to {{ state.count + 1 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>actions.incrementAfter(1000)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment to {{ state.count + 1 }} after 1 sec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>countRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>actions.setCount(countRef)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>set count to {{ countRef }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>actions.setCountAfter(countRef, 1000)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>set count to {{ countRef }} after 1 sec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',3);u.render=function(o,e,c,u,r,d){const g=n("CounterDemo"),b=n("ClientOnly");return s(),a("div",null,[l,i,t(b,null,{default:p((()=>[t(g)])),_:1}),k])};export default u;export{c as __pageData};
